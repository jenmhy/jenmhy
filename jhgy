chrome_options = Options()
    chrome_options.add_argument('--headless')  # 设置为无头模式，即不显示浏览器
    chrome_options.add_argument('user-agent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36"')  # 设置user=agent
    chrome_options.add_experimental_option('excludeSwitches', ['enable-automation'])  # 此步骤很重要，设置为开发者模式，防止被各大网站识别出来使用了Selenium
    chrome_options.add_experimental_option("prefs", {"profile.managed_default_content_settings.images": 2})  # 不加载图片,加快访问速度

    load_driver_success = False  # 加载chromedriver驱动是否成功
    browser = None
    wait = None
    try:
        browser = webdriver.Chrome(executable_path='./chromedriver.exe', chrome_options=chrome_options)  # 设置chromedriver驱动路径
        browser.set_page_load_timeout(10)  # 页面加载超时时间为10s
        browser.set_script_timeout(10)  # 页面js加载超时时间为10s

        wait = WebDriverWait(browser, 10)  # 等待超时时长为10s
        load_driver_success = True
    except Exception as ex:
        load_driver_success = False
        err_str = "加载chromedriver驱动失败，请下载chromedriver驱动并填写正确的路径。\n\n异常信息：{}".format(ex)
        return [err_str]


    # 加载chromedriver驱动成功时执行的操作
    if load_driver_success:

        try:
            # 浏览网页
            browser.get('https://movie.douban.com/subject_search?search_text=' + urllib.parse.quote(key_word) + '&cat=1002')  # get方式获取返回数据
            # js动态渲染的网页,必须等到搜索结果元素(DIV中class=root)出来后，才可以停止加载网页
            # 等待DIV中class=root的元素出现
            wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, '.root')))

            dr = browser.find_elements(by=By.XPATH, value="//div[@class='item-root']") # 获取class为item-root的DIV(因为有多个结果)
            jsonData = []
            res_list = []
            for son in dr:
                movieData = {'rating': ['', 'null'], 'cover_url': '', 'types': '', 'title': '', 'url': '', 'release_date': '', 'vote_count': '', 'actors': ''}
                sub_list = ['', '', '', '']

                url_element = son.find_elements(by=By.XPATH, value=".//a")  # 获取第一个a标签的url(因为有多个结果)
                if url_element:
                    movieData['url'] = (url_element[0].get_attribute("href"))

                img_url_element = url_element[0].find_elements(by=By.XPATH, value=".//img")  # 获取影片海报图片地址
                if img_url_element:
                    movieData['cover_url'] = (img_url_element[0].get_attribute("src"))

                title_element = son.find_elements(by=By.XPATH, value=".//div[@class='title']")  # 获取标题
                if title_element:
                    temp_title = title_element[0].text
                    movieData['title'] = (temp_title.split('('))[0]
                    movieData['release_date'] = temp_title[temp_title.find('(') + 1:temp_title.find(')')]
                    sub_list[0] = movieData['title']

                rating_element = son.find_elements(by=By.XPATH, value=".//span[@class='rating_nums']")  # 获取评分
                if rating_element:
                    movieData['rating'][0] = rating_element[0].text
                    sub_list[1] = movieData['rating'][0]

                vote_element = son.find_elements(by=By.XPATH, value=".//span[@class='pl']")  # 获取数量
                if vote_element:
                    movieData['vote_count'] = vote_element[0].text.replace('(', '').replace(')', '').replace('人评价', '')
                    sub_list[3] = movieData['vote_count']
